//+build linux

package nflog

import (
	"testing"
)

func TestExtractAttributes(t *testing.T) {
	tests := []struct {
		name string
		data []byte
		msg  Msg
	}{
		{name: "SimplePing",
			data: []byte{0x02, 0x00, 0x00, 0x64, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x03, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x58, 0x00, 0x09, 0x00, 0x45, 0x00, 0x00, 0x54, 0x3d, 0x98, 0x40, 0x00, 0x40, 0x01, 0xf0, 0x52, 0x0a, 0x00, 0x00, 0xbd, 0x01, 0x01, 0x01, 0x01, 0x08, 0x00, 0xfe, 0x4b, 0x46, 0xd2, 0x00, 0x02, 0x4e, 0x01, 0x85, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xb0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37},
			msg:  Msg{11: 0x3e8, 14: 0x3e8, 9: []uint8{0x45, 0x0, 0x0, 0x54, 0x3d, 0x98, 0x40, 0x0, 0x40, 0x1, 0xf0, 0x52, 0xa, 0x0, 0x0, 0xbd, 0x1, 0x1, 0x1, 0x1, 0x8, 0x0, 0xfe, 0x4b, 0x46, 0xd2, 0x0, 0x2, 0x4e, 0x1, 0x85, 0x5b, 0x0, 0x0, 0x0, 0x0, 0x1a, 0xb0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37}, 0: 0x800, 1: 0x0, 10: "", 5: 0x3},
		},
	}
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			msg, err := extractAttributes(nil, tc.data)
			if err != nil {
				t.Fatalf("Unexpected error: %v", err)
			}
			if len(msg) != len(tc.msg) {
				t.Fatalf("different length:\n- want: %#v\n-  got: %#v", tc.msg, msg)
			}
			for i, v := range msg {
				switch v.(type) {
				case uint32:
					tv := tc.msg[i].(int)
					if v != uint32(tv) {
						t.Fatalf("unexpected value for key %d\n- want: %#v\n- got: %#v", i, tv, v)
					}
				case uint16:
					tv := tc.msg[i].(int)
					if v != uint16(tv) {
						t.Fatalf("unexpected value for key %d\n- want: %#v\n- got: %#v", i, tv, v)
					}
				case uint8: // aka byte
					tv := tc.msg[i].(int)
					if v != uint8(tv) {
						t.Fatalf("unexpected value for key %d\n- want: %#v\n- got: %#v", i, tv, v)
					}
				case []byte:
					tv := tc.msg[i].([]uint8)
					vv := v.([]uint8)
					if len(v.([]uint8)) != len(tv) {
						t.Fatalf("different length:\n- want: %#v\n-  got: %#v", tv, v)
					}
					for pos, tvV := range tv {
						if tvV != vv[pos] {
							t.Fatalf("unexpected value for key %d at %d\n- want: %#v\n- got: %#v", i, pos, tv, v)
						}

					}
				}
			}
		})

	}

}
